#version 330 core

#define NUM_MAX_PLIGHTS 4
#define NUM_MAX_SLIGHTS 4

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    float     shininess;
};  

struct PLight {
    vec3 position;
    vec3 color;

    float constant;
    float linear;
    float quadratic;

    vec3 ambientFactor;
    vec3 diffuseFactor;
    vec3 specularFactor;
};

struct DLight {
    vec3 direction;

	vec3 ambientFactor;
	vec3 diffuseFactor;
	vec3 specularFactor;

    vec3 color;
};

struct SLight {
	vec3 position;
    vec3 direction;

	float innerCone;
	float outerCone;

	float constant;
    float linear;
    float quadratic;

	vec3 ambientFactor;
	vec3 diffuseFactor;
	vec3 specularFactor;
    vec3 color;
};

// Input data
in vec3 normal;
in vec3 fragmentPosition;
in vec2 texCoords;

out vec4 color;

uniform vec3 cameraPosition;
uniform Material material;
uniform DLight dlight;
uniform PLight plight[NUM_MAX_PLIGHTS];
uniform SLight slight[NUM_MAX_SLIGHTS];

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 viewDirection);
vec3 PointLight(PLight light, vec3 Normal, vec3 viewDirection);
vec3 SpotLight(SLight light, vec3 Normal, vec3 viewDirection);

void main(){
	vec3 finalLight;
	vec3 viewDirection = normalize(cameraPosition - fragmentPosition);
	//Calculate the Directional Light
	finalLight += DirectionalLight(dlight, normal, viewDirection);
	
	//Calculate the Point lights
	for(int i = 0; i < NUM_MAX_PLIGHTS; i++){
		finalLight += PointLight(plight[i], normal, viewDirection); 
	}
	
	//Calculate the Spot lights
	for(int i = 0; i < NUM_MAX_SLIGHTS; i++){
		finalLight += SpotLight(slight[i], normal, viewDirection);
	}
	color = vec4(finalLight, 1.0f);
}

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 viewDirection){
	//Normalized vectors
	vec3 normalizedNormal = normalize(Normal);
	vec3 lightDirection = normalize(-light.direction); 

	//ambientLight
	vec3 ambient = light.ambientFactor * light.color * vec3(texture(material.diffuse, texCoords));

	//Diffuse light
	float diffuseColor = max(dot(normalizedNormal, lightDirection), 0.0);
	vec3 diffuse = light.diffuseFactor * diffuseColor * light.color * vec3(texture(material.diffuse, texCoords)); //White light

	//Specular Light
	vec3 reflectDirection = reflect(-lightDirection, normalizedNormal);  
	float specularLight = pow(max(dot(viewDirection, reflectDirection), 0.0), 64);
	vec3 specular = light.specularFactor * specularLight * light.color * vec3(texture(material.specular, texCoords));  

	return (ambient + diffuse + specular);
}

vec3 PointLight(PLight light, vec3 Normal, vec3 viewDirection){
	//Normalized vectors
	vec3 normalizedNormal = normalize(Normal);
	vec3 lightDirection = normalize(light.position - fragmentPosition); 

	//ambientLight
	vec3 ambient = light.ambientFactor * light.color * vec3(texture(material.diffuse, texCoords));;
	
	//Diffuse light
	float diffuseColor = max(dot(normalizedNormal, lightDirection), 0.0);
	vec3 diffuse = diffuseColor * light.diffuseFactor * light.color * vec3(texture(material.diffuse, texCoords));; //White light
	
	//Specular Light
	vec3 reflectDirection = reflect(-lightDirection, normalizedNormal);  
	float specularLight = pow(max(dot(viewDirection, reflectDirection), 0.0), 64);
	vec3 specular = light.specularFactor * specularLight * light.color * vec3(texture(material.specular, texCoords));;  
	
	//Atenuation
	float distance = length(light.position - fragmentPosition);
	float attenuation = 1.f/( 1.f + 0.09f * distance + 0.032f * distance * distance);
	return  attenuation * (ambient + diffuse + specular);
}

vec3 SpotLight(SLight light, vec3 Normal, vec3 viewDirection){
	 //Normalized vectors
	vec3 normalizedNormal = normalize(Normal);
	vec3 lightDirection = normalize(light.position - fragmentPosition);
	
	//ambientLight
	vec3 ambient = light.ambientFactor * light.color * vec3(texture(material.diffuse, texCoords));
	
	//Atenuation
	float distance = length(light.position - fragmentPosition);
	float attenuation = 1.f/(1.f + 0.09f * distance + 0.032f * distance * distance);

	//if theta is bigger than the radius then we don't calculate lights except the ambient one
    float theta = dot(lightDirection, normalize(-light.direction)); 
    float epsilon = (light.innerCone - light.outerCone);
    float lightAmount = clamp((theta - light.outerCone) / epsilon, 0.0, 1.0);

	if(theta > light.outerCone) {
		//Diffuse light
		float diffuseColor = max(dot(normalizedNormal, lightDirection), 0.0);
		vec3 diffuse = lightAmount * light.diffuseFactor * light.color * vec3(texture(material.diffuse, texCoords)); 

		//Specular Light
		vec3 reflectDirection = reflect(-lightDirection, normalizedNormal);  
		float specularLight = pow(max(dot(viewDirection, reflectDirection), 0.0), 64);
		vec3 specular = light.specularFactor * light.color * specularLight * vec3(texture(material.specular, texCoords));  

		return attenuation * (ambient + diffuse + specular);
	}
	else {
		return attenuation * ambient;
	}
}