#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormals_modelspace;
layout(location = 2) in vec2 textureCoordinates_modelspace;


out vec3 vertices;
out vec3 normal;
out vec3 fragmentPosition;
out vec2 texCoords;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

void main(){	
	//Use the transformation matrix here
    gl_Position = projection * view * model * vec4(vertexPosition_modelspace, 1.0f);

	//Set the out variables
	vertices = vertexPosition_modelspace;
	normal = mat3(transpose(inverse(model))) * vertexNormals_modelspace;
	fragmentPosition = vec3(model * vec4(vertexPosition_modelspace, 1.0f));
	texCoords = textureCoordinates_modelspace;
}

