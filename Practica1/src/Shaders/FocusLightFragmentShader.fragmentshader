#version 330 core

// Ouput data
in vec3 normal;
in vec3 fragmentPosition;
out vec4 color;

uniform vec3 cubeColor;
uniform vec3 lightColor;
uniform vec3 lightPosition;
uniform vec3 direction;
uniform float outerCone;
uniform float innerCone;
uniform vec3 cameraPosition;

void main(){

 	//Normalized vectors
	vec3 normalizedNormal = normalize(normal);
	vec3 lightDirection = normalize(lightPosition - fragmentPosition);

	//ambientLight
	float ambientFactor= 0.05f;
	vec3 ambient = ambientFactor * lightColor;

	//if theta is bigger taht the radius then we don't calculate lights except the ambient one
	float theta = dot(lightDirection, normalize(-direction));
	float epsilon = innerCone - outerCone;
	float lightAmount = clamp((theta - outerCone) / epsilon, 0.0, 1.0);  

	if(theta > outerCone) 
	{       
		//Diffuse light
		float diffuseColor = max(dot(normalizedNormal, lightDirection), 0.0);
		vec3 diffuse = diffuseColor * lightColor; //White light

		//Specular Light
		float specularFactor = 1.f;
		vec3 viewDirection = normalize(cameraPosition - fragmentPosition);
		vec3 reflectDirection = reflect(-lightDirection, normalizedNormal);  
		float specularLight = pow(max(dot(viewDirection, reflectDirection), 0.0), 64);
		vec3 specular = specularFactor * specularLight * lightColor;  

		//Final lightning + ambient light
		vec3 finalLight = (ambient + diffuse + specular) * cubeColor;
		color = vec4(finalLight, 1.f);
	}
	else {
		vec3 finalLight = ambient * cubeColor;
		color = vec4(finalLight, 1.f);
	}
 
}
